/* Count units by type */
static void	count_units(t_obj **units, int *warrior_count, int *worker_count)
{
	int	i;

	*warrior_count = 0;
	*worker_count = 0;
	i = 0;
	while (units[i])
	{
		if (units[i]->s_unit.type_id == UNIT_WARRIOR)
			(*warrior_count)++;
		else if (units[i]->s_unit.type_id == UNIT_WORKER)
			(*worker_count)++;
		i++;
	}
}

/* Count enemies near core */
static int	count_enemies_near_core(t_obj **enemy_units, t_obj *my_core)
{
	int	enemies_near_core;
	int	i;

	enemies_near_core = 0;
	i = 0;
	while (enemy_units[i])
	{
		if (ft_distance(enemy_units[i], my_core) < 20)
			enemies_near_core++;
		i++;
	}
	return (enemies_near_core);
}

/* More aggressive unit creation strategy with minimal workers */
static void	create_unit_strategy(t_team *my_team, int warrior_count,
	int worker_count, int tick_counter, int enemies_near_core)
{
	bool	under_threat;
	int		min_workers;

	under_threat = (enemies_near_core > 0);
	min_workers = 3; // Keep only minimal workers for economy
	
	// First ensure we have at least one worker for resources
	if (worker_count == 0)
		ft_create_unit(UNIT_WORKER);
	// Under threat, prioritize warriors
	else if (under_threat || (tick_counter > 200 && worker_count >= min_workers))
		ft_create_unit(UNIT_WARRIOR);
	// Early game economy setup
	else if (worker_count < min_workers && tick_counter < 300)
		ft_create_unit(UNIT_WORKER);
	// Default to warriors for aggressive play
	else
		ft_create_unit(UNIT_WARRIOR);
}

/* Group warriors into squads for coordinated attacks */
static t_obj	**form_attack_squad(t_obj **warriors, int squad_size)
{
	t_obj	**squad;
	int		i;
	int		count;
	
	count = 0;
	while (warriors[count])
		count++;
	
	if (count < squad_size)
		squad_size = count;
	
	squad = malloc(sizeof(t_obj *) * (squad_size + 1));
	if (!squad)
		return (NULL);
	
	i = 0;
	while (i < squad_size)
	{
		squad[i] = warriors[i];
		i++;
	}
	squad[i] = NULL;
	
	return (squad);
}

/* Get warrior units only */
static t_obj	**get_warriors(t_obj **units)
{
	t_obj	**warriors;
	int		count;
	int		i;
	int		j;
	
	count = 0;
	i = 0;
	while (units[i])
	{
		if (units[i]->s_unit.type_id == UNIT_WARRIOR)
			count++;
		i++;
	}
	
	warriors = malloc(sizeof(t_obj *) * (count + 1));
	if (!warriors)
		return (NULL);
	
	i = 0;
	j = 0;
	while (units[i])
	{
		if (units[i]->s_unit.type_id == UNIT_WARRIOR)
			warriors[j++] = units[i];
		i++;
	}
	warriors[j] = NULL;
	
	return (warriors);
}

/* Handle aggressive warrior behavior */
static void	warrior_attack(t_obj *warrior, t_obj *enemy_core,
	t_obj **enemy_units, int squad_number, int tick_counter)
{
	t_obj	*enemy;
	int		attack_x;
	int		attack_y;
	int		flank_offset;

	enemy = ft_get_nearest_opponent_unit(warrior);
	
	// If enemy is close, attack it
	if (enemy && ft_distance(warrior, enemy) < 15)
	{
		ft_travel_attack(warrior, enemy);
		return;
	}
	
	// Otherwise, execute coordinated attack on enemy core
	// Different squads attack from different angles
	flank_offset = (squad_number % 4) * 90;
	attack_x = enemy_core->x + 10 * cos((tick_counter * 0.01) + flank_offset);
	attack_y = enemy_core->y + 10 * sin((tick_counter * 0.01) + flank_offset);
	
	// First attempt direct attack if close enough
	if (ft_distance(warrior, enemy_core) < 20)
		ft_travel_attack(warrior, enemy_core);
	// Otherwise approach from strategic angle
	else
		ft_travel_to(warrior, attack_x, attack_y);
}

/* Handle warrior defense when under attack */
static void	warrior_defense(t_obj *warrior, t_obj **enemy_units,
	t_obj *my_core, int tick_counter)
{
	t_obj	*nearest_enemy_to_core;
	double	min_distance;
	int		j;
	int		offset_x;
	int		offset_y;

	nearest_enemy_to_core = NULL;
	min_distance = 99999;
	j = 0;
	while (enemy_units[j])
	{
		if (ft_distance(enemy_units[j], my_core) < min_distance)
		{
			min_distance = ft_distance(enemy_units[j], my_core);
			nearest_enemy_to_core = enemy_units[j];
		}
		j++;
	}
	if (nearest_enemy_to_core)
		ft_travel_attack(warrior, nearest_enemy_to_core);
	else
	{
		offset_x = (tick_counter % 10) - 5;
		offset_y = ((tick_counter / 10) % 10) - 5;
		ft_travel_to(warrior, my_core->x + offset_x, my_core->y + offset_y);
	}
}

/* Efficient worker resource gathering */
static void	handle_worker(t_obj *worker, t_obj **enemy_units,
	t_obj *my_core, int tick_counter)
{
	t_obj	*nearest_resource;
	int		safe_x;
	int		safe_y;
	
	nearest_resource = ft_get_nearest_resource(worker);
	if (nearest_resource)
	{
		// Workers just focus on nearest resource, ignore danger
		ft_travel_attack(worker, nearest_resource);
	}
	else
	{
		// Explore to find resources in expanding circle pattern
		safe_x = my_core->x + ((tick_counter / 3) % 40) - 20;
		safe_y = my_core->y + ((tick_counter / 5) % 40) - 20;
		ft_travel_to(worker, safe_x, safe_y);
	}
}

/* Coordinate units for maximum effectiveness */
static void	coordinate_units(t_obj **my_units, t_obj **enemy_units,
	t_obj *my_core, t_obj *enemy_core, int tick_counter,
	int warrior_count, int enemies_near_core)
{
	int		i;
	t_obj	*curr;
	t_obj	**warriors;
	t_obj	**attack_squad;
	int		squad_size;
	bool	under_threat;

	under_threat = (enemies_near_core > 1);
	
	// Handle workers first - simple resource gathering
	i = 0;
	while (my_units[i])
	{
		if (my_units[i]->s_unit.type_id == UNIT_WORKER)
			handle_worker(my_units[i], enemy_units, my_core, tick_counter);
		i++;
	}
	
	// Group warriors into attack squads
	warriors = get_warriors(my_units);
	if (!warriors)
		return;
		
	// If under threat, prioritize defense
	if (under_threat)
	{
		i = 0;
		while (warriors[i])
		{
			warrior_defense(warriors[i], enemy_units, my_core, tick_counter);
			i++;
		}
	}
	else
	{
		// Form attack squads and coordinate attacks
		squad_size = 3; // Warriors per squad
		i = 0;
		while (warriors[i])
		{
			// Assign squad number based on position in array
			int squad_number = i / squad_size;
			warrior_attack(warriors[i], enemy_core, enemy_units, 
				squad_number, tick_counter);
			i++;
		}
	}
	
	free(warriors);
}

/* Main game loop function */
void	ft_user_loop(void *data)
{
	static int	tick_counter = 0;
	t_team		*my_team;
	t_obj		*my_core;
	t_obj		*enemy_core;
	t_obj		**my_units;
	t_obj		**enemy_units;
	int			warrior_count;
	int			worker_count;
	int			enemies_near_core;

	(void)data;
	tick_counter++;
	my_team = ft_get_my_team();
	my_core = ft_get_my_core();
	enemy_core = ft_get_first_opponent_core();
	my_units = ft_get_my_units();
	enemy_units = ft_get_opponent_units();
	
	count_units(my_units, &warrior_count, &worker_count);
	enemies_near_core = count_enemies_near_core(enemy_units, my_core);
	
	create_unit_strategy(my_team, warrior_count, worker_count, 
		tick_counter, enemies_near_core);
	
	coordinate_units(my_units, enemy_units, my_core, enemy_core,
		tick_counter, warrior_count, enemies_near_core);
	
	free(my_units);
	free(enemy_units);
}

